# Form implementation generated from reading ui file 'main-window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets 
from PyQt6.QtCore import pyqtSlot, pyqtSignal
from PyQt6.QtWidgets import QMainWindow
import json, os, subprocess
import time




# Class to represent the app/game details
class CreateNewApp:
    def __init__(self, appOrGame, appPicture, appName, appRating, appDownloadLink, appDescription, appCategory, appVersion=None, appRequirement=None, appSize=None):
        self.appOrGame = appOrGame
        self.appPicture = appPicture
        self.appName = appName
        self.appRating = appRating
        self.appDownloadLink = appDownloadLink
        self.appDescription = appDescription
        self.appCategory = appCategory
        self.appVersion = appVersion
        self.appRequirement = appRequirement
        self.appSize = appSize

# Class to setup and handle the UI form
class Edit_Form:
    def setupUi(self, Form):
        # Set up the main form
        Form.setObjectName("Form")
        Form.resize(375, 390)
        Form.setStyleSheet("background: gray;")

        # Create a layout widget
        layoutWidget = QtWidgets.QWidget(Form)
        layoutWidget.setGeometry(QtCore.QRect(20, 10, 341, 351))
        layout = QtWidgets.QVBoxLayout(layoutWidget)
        layout.setContentsMargins(0, 0, 0, 0)

        # Add widgets to the layout
        self.appOrGame = self.addComboBox(layout, ["App or Game", "Game", "App"])
        self.appPicture = self.addLineEdit(layout, "App Image URL")
        self.appName = self.addLineEdit(layout, "App Name")
        self.appRating = self.addLineEdit(layout, "App Rating 1 to 5")
        self.appDownloadLink = self.addLineEdit(layout, "App Download Link")
        self.appDescription = self.addLineEdit(layout, "App Description")
        self.appCategory = self.addComboBox(layout, ["Game Category", "Role-playing", "FPS", "Adventure", "Action", "Casual", "Arcade", "App Category", "Phone editor", "Task-app Management", "Video player & Editor", "Music", "Productivity"])
        self.appVersion = self.addLineEdit(layout, "App Version")
        self.appRequirement = self.addLineEdit(layout, "App Requirement")
        self.appSize = self.addLineEdit(layout, "App Size")

        # Add the "Add" button
        self.addButton = QtWidgets.QPushButton(Form)
        self.addButton.setGeometry(QtCore.QRect(290, 360, 75, 24))
        self.addButton.setText("Add")
        self.addButton.clicked.connect(self.add)

        # Retranslate the UI
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.oldAppName = None

    def updateInputs(self, app):
        # Update the input fields with the provided app data
        self.appOrGame.setCurrentText(app["appOrGame"])
        self.appPicture.setText(app["appPicture"])
        self.appName.setText(app["appName"])
        self.appRating.setText(app["appRating"])
        self.appDownloadLink.setText(app["appDownloadLink"])
        self.appDescription.setText(app["appDescription"])
        self.appCategory.setCurrentText(app["appCategory"])
        self.appVersion.setText(app["appVersion"])
        self.appRequirement.setText(app["appRequirement"])
        self.appSize.setText(app["appSize"])
        self.oldAppName = app["appName"]
        print("Signal worked")

    # Utility method to add a QLineEdit with a placeholder
    def addLineEdit(self, layout, placeholder):
        lineEdit = QtWidgets.QLineEdit()
        lineEdit.setPlaceholderText(placeholder)
        layout.addWidget(lineEdit)
        return lineEdit

    # Utility method to add a QComboBox with a list of items
    def addComboBox(self, layout, items):
        comboBox = QtWidgets.QComboBox()
        comboBox.addItems(items)
        layout.addWidget(comboBox)
        return comboBox

    # Method to handle the addition of a new app
    def add(self):
        # Gather data from the input fields
        newApp = CreateNewApp(
            appOrGame=self.appOrGame.currentText(),
            appPicture=self.appPicture.text(),
            appName=self.appName.text(),
            appRating=self.appRating.text(),
            appDownloadLink=self.appDownloadLink.text(),
            appDescription=self.appDescription.text(),
            appCategory=self.appCategory.currentText(),
            appVersion=self.appVersion.text(),
            appRequirement=self.appRequirement.text(),
            appSize=self.appSize.text()
        )
        
        # Save the new app data to a JSON file
        self.saveAppToFile(newApp)

    # Method to save the app data to a JSON file
    def saveAppToFile(self, app):
        directory = r'.\Bulaloi-App-Development-Experiment\next-app\public\apps-games-data'
        directory += r'\games' if app.appOrGame == "Game" else r'\apps'
        subprocess.run(['cd', directory, '&&', 'del', f'{self.oldAppName}.json'], shell=True, capture_output=True,)
        full_path = os.path.join(directory, f"{app.appName}.json")

        with open(full_path, 'w') as file:
            json.dump(app.__dict__, file, indent=4)
        
    # Method to set up the translations for the UI components
    def retranslateUi(self, Form):
        Form.setWindowTitle(QtCore.QCoreApplication.translate("Form", "Add"))





class Ui_MainWindow(QMainWindow):
    editSignal = pyqtSignal(dict)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(735, 495)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(0, 0))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("B-icon.png"), QtGui.QIcon.Mode.Selected, QtGui.QIcon.State.On)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background: gray;")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.scrollArea_2 = QtWidgets.QScrollArea(parent=self.centralwidget)
        self.scrollArea_2.setEnabled(True)
        self.scrollArea_2.setGeometry(QtCore.QRect(50, 10, 641, 411))
        font = QtGui.QFont()
        font.setFamily("PMingLiU-ExtB")
        font.setBold(False)
        self.scrollArea_2.setFont(font)
        self.scrollArea_2.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.scrollArea_2.setMouseTracking(False)
        self.scrollArea_2.setAutoFillBackground(False)
        self.scrollArea_2.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scrollArea_2.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scrollArea_2.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustIgnored)
        self.scrollArea_2.setWidgetResizable(False)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 622, 409))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.verticalLayout.setObjectName("verticalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
        self.horizontalLayout_2.setSpacing(2)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.verticalLayout.addLayout(self.verticalLayout_2)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.horizontalLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(50, 430, 641, 61))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.addButton = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        self.addButton.setObjectName("addButton")
        self.horizontalLayout.addWidget(self.addButton)
        self.deleteButton = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        self.deleteButton.setObjectName("deleteButton")
        self.horizontalLayout.addWidget(self.deleteButton)
        self.searchButton = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        self.searchButton.setObjectName("searchButton")
        self.horizontalLayout.addWidget(self.searchButton)
        self.refreshButton = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        self.refreshButton.setObjectName("refreshButton")
        self.horizontalLayout.addWidget(self.refreshButton)
        self.saveButton = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        self.saveButton.setObjectName("saveButton")
        self.horizontalLayout.addWidget(self.saveButton)
        MainWindow.setCentralWidget(self.centralwidget)
        self.iterateAppsAndRetranslate()
        # self.EditWindow = Edit_Form()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def createForSlotEdit(self, dict):
        return lambda: self.editApp(dict)

    @pyqtSlot()
    def editApp(self, dict):
        print(f"Clicked: {dict}")
        print("EditWindow opened")
        self.EditWindow = QtWidgets.QWidget()
        self.ui = Edit_Form()
        self.ui.setupUi(self.EditWindow)
        self._translate = QtCore.QCoreApplication.translate
        self.EditWindow.setWindowTitle(self._translate("MainWindow", "Bulaloi Manager"))
        self.EditWindow.show()
        
        self.editSignal.connect(self.ui.updateInputs)  # Connect the signal to the updateInputs method of the EditWindow's UI
        time.sleep(3)
        self.sendDataToEditWindow(dict)

    def sendDataToEditWindow(self, dict):
        data = dict
        self.editSignal.emit(data)

    def iterateAppsAndRetranslate(self):
            listOfAppNames = os.listdir(r'./Bulaloi-App-Development-Experiment\next-app\public\apps-games-data\apps')
            listOfGameNames = os.listdir(r'./Bulaloi-App-Development-Experiment\next-app\public\apps-games-data\games')
            appsDir = r'./Bulaloi-App-Development-Experiment\next-app\public\apps-games-data\apps/'
            gamesDir = r'./Bulaloi-App-Development-Experiment\next-app\public\apps-games-data\games/'
            listOfDics = []

            for Name in listOfAppNames:
                with open(appsDir + Name, 'r') as file:
                    data = json.load(file)
                    listOfDics.append(data)
            
            for Name in listOfGameNames:
                with open(gamesDir + Name, 'r') as file:
                    data = json.load(file)
                    listOfDics.append(data)
            
            for index, dic in enumerate(listOfDics):
                self.scrollAreaWidgetContents = QtWidgets.QWidget()
                self.horizontalLayout = QtWidgets.QHBoxLayout()
                self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint)
                self.horizontalLayout.setSpacing(2)
                self.horizontalLayout.setObjectName(f"horizontalLayout_{index}")
                self.checkBox = QtWidgets.QCheckBox(parent=self.scrollAreaWidgetContents)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Maximum, QtWidgets.QSizePolicy.Policy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.checkBox.sizePolicy().hasHeightForWidth())
                self.checkBox.setSizePolicy(sizePolicy)
                self.checkBox.setMinimumSize(QtCore.QSize(13, 0))
                self.checkBox.setText("")
                self.checkBox.setObjectName(f"checkBox_{index}")
                self.horizontalLayout.addWidget(self.checkBox)
                self.pushButton = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
                self.pushButton.setSizePolicy(sizePolicy)
                self.pushButton.setMinimumSize(QtCore.QSize(150, 0))
                self.pushButton.setObjectName(f"pushButton_{index}")
                self.horizontalLayout.addWidget(self.pushButton)
                self.verticalLayout.addLayout(self.horizontalLayout)
                self.pushButton.clicked.connect(self.createForSlotEdit(dic))
                print(dic['appName'])
                _translate = QtCore.QCoreApplication.translate
                self.pushButton.setText(_translate("MainWindow", dic['appName']))
                self.addButton.setText(_translate("MainWindow", "Add"))
                self.deleteButton.setText(_translate("MainWindow", "Delete"))
                self.searchButton.setText(_translate("MainWindow", "Search"))
                self.refreshButton.setText(_translate("MainWindow", "Refresh"))
                self.saveButton.setText(_translate("MainWindow", "Save"))

def showMainWindow():
    if __name__ == "__main__":
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Bulaloi Manager"))
        MainWindow.show()
        sys.exit(app.exec())

if os.path.exists('./Bulaloi-App-Development-Experiment'):
    print("Repo already cloned, skipping clone step")
    showMainWindow()
else:
    print("Cloning repo...")
    subprocess.run(['git', 'clone', 'https://github.com/Boboe16/Bulaloi-App-Development-Experiment', '&&', 'cd', 'Bulaloi-App-Development-Experiment/next-app'], shell=True, capture_output=True, text=True)
    showMainWindow()